{"name":"Jongo-dao","tagline":"A generic data access library for jongo","body":"jongo-dao\r\n=========\r\n\r\nA generic data access library for jongo\r\n\r\nSummary\r\n=======\r\nEncapsulates frequently used boiler plate, so models don't have to rewrite the same\r\nboring code again and again.\r\n\r\nAuthor\r\n======\r\nMohammad Nasir Rasul < nasir [at] rasul [dot] ca>\r\n\r\nWebsite: http://mnrasul.github.io/jongo-dao/\r\n\r\nIssue Tracker: On Github - https://github.com/mnrasul/jongo-dao/issues\r\n\r\nCode: https://github.com/mnrasul/jongo-dao\r\n\r\nMailing List: None exists yet. You can email me. If there is sufficient traction, I'll set one up.\r\n\r\n\r\nUsage\r\n=====\r\nHave a look at the test class provided for an example usage.\r\n\r\n\r\nAdvantages\r\n==========\r\nI find it tedious to rewrite the same kind of queries for similar objects. I built this DAO for myself. \r\nPerhaps someone will find it useful.\r\n\r\nFeel free to modify it to suit your needs.\r\n\r\nIt saves me the effort of writing same queries again and again. Instead, I only need to write queries\r\nwhich are rather unique. Overtime, I expect, to flesh this out more as I observe my usage patterns.\r\n\r\nUsage\r\n=====\r\n* Create a model\r\n* Subclass DAO to provide specific initialization vectors\r\n* Use DAO\r\n \r\n## Create a model\r\n\r\n```java\r\npublic class Person implements Model{\r\n    @Id\r\n    ObjectId id;\r\n    \r\n    @JsonProperty(\"fn\")\r\n    String firstName;\r\n    \r\n    @JsonProperty(\"ln\")\r\n    String lastName;\r\n    \r\n    @JsonProperty(\"a\")\r\n    Address address;\r\n    \r\n    @JsonProperty(\"l\")\r\n    List<String> tags = new ArrayList<String>(3);\r\n    \r\n    public ObjectId getId() {\r\n        return this.id;\r\n    }\r\n\r\n    public String getHash() {\r\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\r\n    }\r\n    \r\n}\r\n```\r\n\r\n\r\n\r\n## Subclass DAO\r\n```java\r\npublic class PersonDAO extends DAO<Person>{\r\n\r\n    public PersonDAO(String connectionURL, String dbname, String collectionName, Class<Person> type) throws UnknownHostException {\r\n        super(connectionURL, dbname, collectionName, Person.class);\r\n    }\r\n    \r\n    public PersonDAO() throws UnknownHostException{\r\n        super(\"localhost:27017\", \"jongo-dao-test\", \"person\", Person.class);\r\n    }\r\n    \r\n}\r\n```\r\n\r\n## Use DAO\r\n```java\r\n    @Test\r\n    public void testCRUD() throws UnknownHostException{\r\n        Person p = new Person();\r\n        p.lastName = \"Aladin\";\r\n        p.firstName = \"Prince\";\r\n        Address address = new Address();\r\n        address.street = \"Palace\";\r\n        address.city = \"City\";\r\n        address.postal = \"12345\";\r\n        address.state = \"Kingdom\";\r\n        address.country = \"Magicland\";\r\n        p.address = address;\r\n        p.tags.add(\"flying carpet\");\r\n        p.tags.add(\"magic lamp\");\r\n        p.tags.add(\"fantasy\");\r\n        \r\n        PersonDAO dao = new PersonDAO();\r\n        dao.save(p);\r\n        ObjectId id = p.id;\r\n        Person find = dao.find(id);\r\n        \r\n        Assert.assertEquals(p.firstName, find.firstName);\r\n        Assert.assertEquals(p.lastName, find.lastName);\r\n        Assert.assertEquals(p.address.city, find.address.city);\r\n        \r\n        p.firstName = \"Genie\";\r\n        dao.update(p);\r\n        Assert.assertNotEquals(p.firstName, find.firstName);\r\n        \r\n        find = dao.find(id);\r\n        Assert.assertEquals(p.firstName, find.firstName);\r\n        \r\n        dao.delete(id);\r\n        find = dao.find(id);\r\n        Assert.assertNull(find);\r\n        \r\n    }\r\n```\r\n","google":"UA-44011103-1","note":"Don't delete this file! It's used internally to help with page regeneration."}